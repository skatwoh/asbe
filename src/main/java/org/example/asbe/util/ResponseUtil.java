package org.example.asbe.util;

import jakarta.servlet.http.HttpServletRequest;
import org.example.asbe.response.ApiResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import java.util.List;

public class ResponseUtil {
    private static final Logger log = LoggerFactory.getLogger(ResponseUtil.class);

    // ‚úÖ Ph·∫£n h·ªìi th√†nh c√¥ng (c√≥ d·ªØ li·ªáu v√† th√¥ng b√°o)
    public static <T> ResponseEntity<ApiResponse<T>> success(T data, String message) {
        return buildResponse(HttpStatus.OK, message, data, null);
    }

    // ‚úÖ Ph·∫£n h·ªìi th√†nh c√¥ng (ch·ªâ c√≥ d·ªØ li·ªáu, m·∫∑c ƒë·ªãnh message l√† "Success")
    public static <T> ResponseEntity<ApiResponse<T>> success(T data) {
        return buildResponse(HttpStatus.OK, "Success", data, null);
    }

    // ‚ùå Ph·∫£n h·ªìi l·ªói (c√≥ status, message, kh√¥ng c√≥ d·ªØ li·ªáu)
    public static ResponseEntity<ApiResponse<Void>> error(HttpStatus status, String message) {
        return buildResponse(status, message, null, null);
    }

    // ‚ùå Ph·∫£n h·ªìi l·ªói (c√≥ status, message, k√®m d·ªØ li·ªáu b·ªï sung)
    public static <T> ResponseEntity<ApiResponse<T>> error(HttpStatus status, String message, T data) {
        return buildResponse(status, message, data, null);
    }

    // ‚ùå Ph·∫£n h·ªìi l·ªói (c√≥ status, message, danh s√°ch l·ªói chi ti·∫øt)
    public static ResponseEntity<ApiResponse<Void>> error(HttpStatus status, String message, List<String> errors) {
        return buildResponse(status, message, null, errors);
    }

    // ‚úÖ Ph·∫£n h·ªìi chung (c√≥ th·ªÉ l√† th√†nh c√¥ng ho·∫∑c l·ªói)
    public static <T> ResponseEntity<ApiResponse<T>> response(HttpStatus status, String message, T data, List<String> errors) {
        return buildResponse(status, message, data, errors);
    }


    // üöÄ H√†m chung ƒë·ªÉ x√¢y d·ª±ng ph·∫£n h·ªìi API
    private static <T> ResponseEntity<ApiResponse<T>> buildResponse(HttpStatus status, String message, T data, List<String> errors) {
        String path = getCurrentRequestPath();
        ApiResponse<T> response = new ApiResponse<>(status.value(), message, data, path, errors);

        if (status.isError()) {
            log.error("API Error: status={}, message={}, path={}, traceId={}, errors={}",
                    status, message, path, response.getTraceId(), errors);
        }

        return ResponseEntity.status(status).body(response);
    }

    // üîç L·∫•y ƒë∆∞·ªùng d·∫´n API hi·ªán t·∫°i
    private static String getCurrentRequestPath() {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        if (attributes != null) {
            HttpServletRequest request = attributes.getRequest();
            return request.getRequestURI();
        }
        return "Unknown";
    }
}